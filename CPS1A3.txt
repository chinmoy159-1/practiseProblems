/* *
* Chotu & Kiss Day
* "It all started with a kiss."
* Chotu was up all night, planning for his first kiss.
* He has collected the data about all the kissing spots in Allahabad.
* According to his survey there are N kissing spots in the city, each spot i is associated with a security value Si.
* Chotu wants to visit as many spot as they can, but unfortunately the evil seniors hosted a contest on Kiss Day.
* "Who on earth would code on kiss day!!" said Chotu. He tries to persuade his girlfriend to leave the contest,
* but she being a true IIIT'an was determined to participate in the contest (kudos to the girlfriend).
* Chotu is left with no other option but to replan his trip.
* He comes to a conclusion that if they visit more than three spots they will not be able to participate in the contest.
* So he decided to visit exactly three spots.
* This is not the end of problems for Chotu. Allahabad is not a paradise for lovers.
* KissStoppers, a moral policing group is active in Allahabad, which is famous for troubling the couples during valentine week.
* But Chotu being intelligent has an escape plan. KissStoppers' aversion towards the number K is well known.
* Chotu knows that if the sum of the security factors of the three visited spots is K, then they will be safe.
* Help Chotu find out whether he can safely celebrate Kiss Day or not. 
*
* Input:-
* First line contains integer N denoting total number of kissing spots according to Chotu's survey. 
* Second line contains N distinct numbers separated by single space denoting the security value of N spots. 
* Third line contains integer K as explained above. 
*
* Output:-
* Print YES if Chotu is able to find three places whose sum of security value is equal to given integer K else print NO. 
*
* Constraints 
* 1 <= N <= 3*10^3 
* 1 <= Security Value <= 10^9 
* 1 <= K <= 10^9
*
* Note - Chotu can visit each place only once.
* Sample Input:-
* 6
* 1 5 4 7 8 9
* 17
* Sample Output:-
* YES
*/
#include<stdio.h>
#include<stdlib.h>
int comp(const void *a, const void *b) {
	if (*(long long int *)a > *(long long int *)b) {
		return 1;
	}
	return 0;
}
int b_search(long long int arr[], int u, int val) {
	int l = 0, mid;
	while (l <= u) {
		mid = (l+u)/2;
		if (arr[mid] == val) {
			return mid;
		} else if (arr[mid] > val) {
			u = mid - 1;
		} else {
			l = mid + 1;
		}
	}
	return -1;
}
int main() {
	int n, i, j, fl = 0;
	scanf("%d", &n);
	long long int arr[n];
	long long int k, s, x;
	for (i = 0; i < n; i++) {
		scanf("%lld", &arr[i]);
	}
	qsort(arr, n, sizeof(long long int), comp);
	scanf("%lld", &k);
	for (i = n-1; i > 0; i--) {
		s = k - arr[i];
		for (j = i-1; j > 0; j--) {
			x = s - arr[j];
			if (x == 0) {
				continue;
			}
			if (b_search(arr, j-1, x) != -1) {
				fl = 1;
				j = 0;
				i = 0;
			}
		}
	}
	if (fl == 0) {
		printf("NO\n");
	} else {
		printf("YES\n");
	}
	return 0;
}
